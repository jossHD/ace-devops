resources:
  repositories:
    - repository: templates
      endpoint: github-jossHD
      type: github
      name: jossHD/templates
      trigger: none
    - repository: policy-policyname
      endpoint: github-jossHD
      type: github
      name: jossHD/policy-policyname
      trigger: none

trigger:
- main

pool: 
  name: Windows Agent

parameters:
- name: appOptions
  displayName: Application options
  type: object
  default:
    - name: 'api-apiname'
      secret: []
    - name: 'lib-libname'
      secret: []
- name: appPolicies
  displayName: Application Policies options
  type: object
  default:
    - policy-policyname

variables: 
  - template: variables.yml

stages:
- stage: CreateApplication
  displayName: Create Application
  jobs: 
  - deployment: CreateApplicationACE
    workspace:
      clean: all
    displayName: Create Application in ACE
    environment: $(environmentValue)
    strategy:
      runOnce:
        deploy:
          steps:
          - template: templates/creatingapplication.yml

- stage: DeployApplication
  displayName: Deploy Application
  dependsOn: CreateApplication
  pool: 
    name: Default
  jobs:
  - deployment: DeployArgo
    workspace:
      clean: all
    displayName: Deploy in ArgoCD
    environment: $(environmentValue)
    strategy:
      runOnce:
        preDeploy:
          steps:
          - template: ibm-gitops-pre-deploy.yml@templates
            parameters:
              appOptions: ${{ parameters.appOptions }}
              appPolicies: ${{ parameters.appPolicies }}
        deploy:
          steps:
          - template: ibm-gitops-deploy.yml@templates

          
- stage: PublishApplication
  displayName: Publish Application in APIC
  jobs:
  - deployment: PublishAPIC
    workspace:
      clean: all
    displayName: Publishing in APIC
    environment: $(environmentValue)
    strategy:
      runOnce:
        deploy:
          steps:
          - template: templates/publish-api.yml

- stage: 'TestApplication'
  displayName: Testing Application in APIC
  jobs:
  - job: GetCredentials
    steps:
    - bash: |
        echo "##vso[task.setvariable variable=xAPIKey;isOutput=true]$(xapikey)"
        echo "##vso[task.setvariable variable=xAPISecret;isOutput=true]$(xapisecret)"
      name: credentials
  - job: ResquestTestingAPI
    pool: server
    timeoutInMinutes: 1
    cancelTimeoutInMinutes: 1
    dependsOn: GetCredentials
    variables:
      xapikey: $[dependencies.GetCredentials.outputs['credentials.xAPIKey']]
      xapisecret: $[dependencies.GetCredentials.outputs['credentials.xAPISecret']]
    steps:
    - task: InvokeRESTAPI@1
      inputs:
        connectionType: 'connectedServiceName'
        serviceConnection: 'api Testing'
        method: 'POST'
        headers: |
          {
          "Content-Type":"application/json",
          "X-API-Key": "$(xapikey)",
          "X-API-Secret": "$(xapisecret)"
          }
        body: |
          {
            "options":{
              "allAssertions":true,
              "JUnitFormat":false
            }
           }
        waitForCompletion: 'false'
